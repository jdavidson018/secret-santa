{"version":3,"sources":["logo.svg","GiftExchangeTable.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","useStyles","makeStyles","root","width","overflowX","table","createData","giver","receiver","rows","GiftExchangeTable","classes","Paper","className","Table","aria-label","TableHead","TableRow","TableCell","align","TableBody","map","row","key","name","component","scope","App","Container","fluid","Box","id","textAlign","m","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+JAAAA,EAAOC,QAAU,IAA0B,kC,uKCSrCC,EAAYC,YAAW,CAC3BC,KAAM,CACJC,MAAO,MACPC,UAAW,QAEbC,MAAO,KAIT,SAASC,EAAWC,EAAMC,GACxB,MAAO,CAAED,QAAOC,YAGlB,IAAMC,EAAO,CACXH,EAAW,UAAW,QACtBA,EAAW,MAAO,WAClBA,EAAW,OAAQ,OACnBA,EAAW,OAAQ,SAGN,SAASI,IACtB,IAAMC,EAAUX,IAEhB,OACE,kBAACY,EAAA,EAAD,CAAOC,UAAWF,EAAQT,MACxB,kBAACY,EAAA,EAAD,CAAOD,UAAWF,EAAQN,MAAOU,aAAW,gBAC1C,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,cACA,kBAACA,EAAA,EAAD,CAAWC,MAAM,SAAjB,cAGJ,kBAACC,EAAA,EAAD,KACGX,EAAKY,KAAI,SAAAC,GAAG,OACX,kBAACL,EAAA,EAAD,CAAUM,IAAKD,EAAIE,MACjB,kBAACN,EAAA,EAAD,CAAWO,UAAU,KAAKC,MAAM,OAC7BJ,EAAIf,OAEP,kBAACW,EAAA,EAAD,CAAWC,MAAM,SAASG,EAAId,iB,0BC1B7BmB,MAZf,WACE,OACE,kBAACC,EAAA,EAAD,CAAWC,OAAK,EAAChB,UAAU,cACzB,kBAACiB,EAAA,EAAD,CAAKC,GAAG,aAAaC,UAAU,SAASC,EAAG,GACzC,0FACA,oFAEF,kBAACvB,EAAD,QCJcwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.85090e30.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    width: '20%',\r\n    overflowX: 'auto',\r\n  },\r\n  table: {\r\n  },\r\n});\r\n\r\nfunction createData(giver,receiver) {\r\n  return { giver, receiver};\r\n}\r\n\r\nconst rows = [\r\n  createData(\"Michael\", \"Luke\"),\r\n  createData(\"Sam\", \"Michael\"),\r\n  createData(\"Jack\", \"Sam\"),\r\n  createData(\"Luke\", \"Jack\")\r\n];\r\n\r\nexport default function GiftExchangeTable() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Paper className={classes.root}>\r\n      <Table className={classes.table} aria-label=\"simple table\">\r\n        <TableHead>\r\n          <TableRow>\r\n            <TableCell>Giver</TableCell>\r\n            <TableCell align=\"right\">Receiver</TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {rows.map(row => (\r\n            <TableRow key={row.name}>\r\n              <TableCell component=\"th\" scope=\"row\">\r\n                {row.giver}\r\n              </TableCell>\r\n              <TableCell align=\"right\">{row.receiver}</TableCell>\r\n            </TableRow>\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n    </Paper>\r\n  );\r\n}","import React from 'react';\nimport logo from './logo.svg';\nimport GiftExchangeTable from \"./GiftExchangeTable\";\nimport Container from '@material-ui/core/Container';\nimport Box from '@material-ui/core/Box';\n\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <Container fluid className=\"App-header\">\n      <Box id=\"HeaderText\" textAlign=\"center\" m={1}>\n        <h1>Welcome to the third annual Davidson Brother Gift Exchange</h1>\n        <h4>Pairings are displayed below. Minimum price is $50.</h4>\n      </Box>\n      <GiftExchangeTable></GiftExchangeTable>\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}